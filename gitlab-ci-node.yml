image: node:12.16-buster-slim

stages:          # List of stages for jobs, and their order of execution
  - build
  - quality
  - test
  - deploy

# build stage for different env:

sit1-build-job:
  stage: build
  variables:
    # DB_HOST: $DB_HOST
    # DB_USERNAME: $DB_USERNAME
    DB_PASSWORD: $sit1_db_password
  tags:
     - Docker
  only:
    - sit1
  script:
    # - 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash'
    # - sudo sh -c "echo 'export NVM_DIR=\"/usr/local/nvm\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /etc/profile" 
    # - source /etc/profile
    # - nvm install 12.16.1
    # - nvm use 12.16.1
    - echo $sit1_db_password
    - npm -y install --unsafe-perm

uat1-build-job:
  stage: build
  tags:
     - Docker
  only:
    - uat1
  script:
    # - 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash'
    # - sudo sh -c "echo 'export NVM_DIR=\"/usr/local/nvm\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /etc/profile" 
    # - source /etc/profile
    # - nvm install 12.16.1
    # - nvm use 12.16.1
    - npm -y install --unsafe-perm

preprod1-build-job:
  stage: build
  tags:
     - Docker
  only:
    - preprod1
  script:
    # - 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash'
    # - sudo sh -c "echo 'export NVM_DIR=\"/usr/local/nvm\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /etc/profile" 
    # - source /etc/profile
    # - nvm install 12.16.1
    # - nvm use 12.16.1
    - npm -y install --unsafe-perm

master-build-job:
  stage: build
  tags:
     - Docker
  only:
    - master
  script:
    # - 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash'
    # - sudo sh -c "echo 'export NVM_DIR=\"/usr/local/nvm\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /etc/profile"
    # - sudo sh -c "echo '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /etc/profile" 
    # - source /etc/profile
    # - nvm install 12.16.1
    # - nvm use 12.16.1
    - apt update
    - apt -y install zip
    - npm -y install --unsafe-perm
    - pwd
    - zip -r Assurant_Servinsur_Node.zip ./*
  artifacts:
    paths:
      - Assurant_Servinsur_Node.zip

# Test stage for different env:

sit1_test_job:
  stage: test
  tags:
    - Docker
  only:
    - sit1
  script:
    - npm -y install --unsafe-perm
    - npm test

uat1_test_job:
  stage: test
  tags:
    - Docker
  only:
    - uat1
  script:
    - npm -y install --unsafe-perm
    - npm test

preprod1_test_job:
  stage: test
  tags:
    - Docker
  only:
    - preprod1
  script:
    - npm -y install --unsafe-perm
    - npm test

master_test_job:
  stage: test
  tags:
    - Docker
  only:
    - master
  script:
     - npm -y install --unsafe-perm
     - npm test
     - echo "hi anjali"
  artifacts:
    paths:
      - "/test_coverage"

# Quality stage for different env:

sit1_sonarqube_analysis_job:
  stage: quality
  tags:
     - Sonar
  only:
    - sit1
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_HOST_URL: $SONAR_HOST_URL
    SONAR_PROJECT_NAME: "Assurant_Servinsur_Node"
  script:
    - sonar-scanner -X -Dsonar.javascript.lcov.reportPaths=/test_coverage/lcov.info
  allow_failure: true 

uat1_sonarqube_analysis_job:
  stage: quality
  tags:
     - Sonar
  only:
    - uat1
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_HOST_URL: $SONAR_HOST_URL
    SONAR_PROJECT_NAME: "Assurant_Servinsur_Node"
    GIT_DEPTH: "0"
  script:
    - sonar-scanner -X

preprod1_sonarqube_analysis_job:
  stage: quality
  tags:
     - Sonar
  only:
    - preprod1
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_HOST_URL: $SONAR_HOST_URL
    SONAR_PROJECT_NAME: "Assurant_Servinsur_Node"
    GIT_DEPTH: "0"
  script:
    - sonar-scanner -X

master_sonarqube_analysis_job:
  stage: quality
  tags:
     - Sonar
  only:
    - master
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_HOST_URL: $SONAR_HOST_URL
    SONAR_PROJECT_NAME: "Assurant_Servinsur_Node"
    GIT_DEPTH: "0"
  script:
    - sonar-scanner -X -Dsonar.javascript.lcov.reportPaths=/test_coverage/lcov.info
  allow_failure: true  


# Deploy stage for different env:

deploy-sit1:
  stage: deploy
  tags:
    - Docker
  only:
    - sit1
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
  environment: sit1

deploy-prod:
  stage: deploy
  tags:
    - Docker
  only:
    - master
  script:
    - apt update
    - apt -y install openssh-client telnet
    - apt show pkg openssh-client
    - eval $(ssh-agent -s)
    - chmod 400 "$DEPLOYMENT_PRIVATE_KEY"
    - ssh-add "$DEPLOYMENT_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - scp -o "StrictHostKeyChecking=no" -i "$DEPLOYMENT_PRIVATE_KEY" -v Assurant_Servinsur_Node.zip gitlab_runner@172.31.19.55:/home/gitlab_runner
    - ssh -i "$DEPLOYMENT_PRIVATE_KEY" gitlab_runner@172.31.19.55 'cd /home/gitlab_runner/ | mkdir Assurant_Servinsur_Node | unzip Assurant_Servinsur_Node.zip -d /home/gitlab_runner/Assurant_Servinsur_Node/'
    - ssh -i "$DEPLOYMENT_PRIVATE_KEY" gitlab_runner@172.31.19.55 'cd /home/gitlab_runner/Assurant_Servinsur_Node | pm2 start api.js --force'
  environment: production
